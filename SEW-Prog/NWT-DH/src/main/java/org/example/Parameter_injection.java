package org.example;

import java.math.BigInteger;

public class Parameter_injection {
    public static void main(String[] args) {
        BigInteger g = new BigInteger("2");
        BigInteger p = new BigInteger("2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919");
        BigInteger a = new BigInteger("221955199083478349821702744533629857958035141797337831953232493800625043189527860901745898572916358110464106830152030682082241162217289401647876349287149892679905758180195891820118067716611943695555249957236195675136697196350293170180219417521344889488363175251720761321848182644807431929602767929513323745764821040701323798420312427975852985124229846667857333028622901311653126188859516878605193780550667689384260549306278270091041949918614517556823704965898510");

        BigInteger result = modExponentation(g, a, p);
        System.out.println("g^a mod p = " + result);
    }

    public static BigInteger modExponentation(BigInteger base, BigInteger exponent, BigInteger modulo) {
        BigInteger result = BigInteger.ONE;
        while (exponent.compareTo(BigInteger.ZERO) > 0) {
            if (exponent.testBit(0)) {
                result = result.multiply(base).mod(modulo);
            }
            base = base.multiply(base).mod(modulo);
            exponent = exponent.shiftRight(1);
        }
        return result;
    }
}
